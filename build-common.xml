<!--
  ~ Copyright 2004-2014 ICEsoft Technologies Canada Corp.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the
  ~ License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an "AS
  ~ IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  ~ express or implied. See the License for the specific language
  ~ governing permissions and limitations under the License.
  -->

<project name="ICEpush integration common builds">

	<fileset id="dist.icepush.jar" file="${dist.dir}/icepush.jar" />

	<property file="./build.properties" />
	
	<!-- Check if release.type is set, and if so append it after the tertiary value -->
	<condition property="version.string" value="${version.primary}.${version.secondary}.${version.tertiary}.${release.type}">
    	<isset property="release.type"/>
	</condition>
    <property name="version.string" value="${version.primary}.${version.secondary}.${version.tertiary}"/>
   

	<fileset id="icepush.dist" dir="${root.offset}/core/${dist.dir}">
		<include name="icepush.jar" />
	</fileset>
	
    <tstamp>
        <format property="build.time" pattern="yyyy-MM-dd hh:mm:ss"/>
    </tstamp>

	<macrodef name="clean">
		<element name="add.filesets" optional="true" />
		<sequential>
			<delete failonerror="false" includeEmptyDirs="true">
				<fileset dir="${build.dir}" />
				<fileset dir="${dist.dir}" />
				<add.filesets/>
			</delete>
		</sequential>
	</macrodef>
	
	<target name="clean">
		<echo>Cleaning ${ant.project.name}...</echo>
		<clean/>
	</target>

	<target name="pre.compile" description="prepare for compilation" depends="clean">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/classes" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="compile" depends="pre.compile">
		<icepush.available/>
		<compile/>
	</target>
	
	<target name="jar" depends="compile">
		<build.jar/>
	</target>

	<macrodef name="compile">
		<attribute name="src.copy.excludes" default="**/*.java" />
		<attribute name="failonerror" default="true" />
		<attribute name="src.javac.excludes" default="" />
		<attribute name="compile.target" default="1.8" />
		<attribute name="compile.source" default="1.8" />
		<attribute name="compile.debug" default="true" />
		<attribute name="compile.debuglevel" default="lines,vars,source"/>
		<attribute name="src.dir" default="${java.dir}"/>
		
		<element name="add.javac.elements" optional="true" />
		<element name="add.classpath.elements" optional="true" />

		<sequential>
			<echo>Compiling ${ant.project.name}...</echo>
			<mkdir dir="${java.dir}" />
			<mkdir dir="${build.dir}/classes" />

			<javac destdir="${classes.dir}" sourcepath="" 
				source="@{compile.source}" 
				target="@{compile.target}" 
				debug="@{compile.debug}" 
				debuglevel="@{compile.debuglevel}"
				failonerror="@{failonerror}">
				
				<src location="@{src.dir}" />
				<include name="**/*.java" />
				<exclude name="@{src.javac.excludes}" />
				<classpath>
					<fileset refid="icepush.dist" />
                                        <fileset dir="${root.offset}/${super.lib.dir}" erroronmissingdir="false" />
					<fileset dir="${root.offset}/${lib.dir}" erroronmissingdir="false" />
					<add.classpath.elements />
				</classpath>
				<add.javac.elements />
				
			</javac>

			<copy todir="${build.dir}/classes" preservelastmodified="true">
				<fileset dir="${java.dir}" excludes="@{src.copy.excludes}" />
			</copy>

		</sequential>
	</macrodef>

	<macrodef name="build.jar">
		<attribute name="jar.file.name" default="${ant.project.name}.jar" />
		<attribute name="temp.jar.file.name" default="${ant.project.name}-temp.jar" />
		<element name="add.excludes" optional="true" />
		<element name="add.filesets" optional="true" />

		<sequential>
			<echo>Jarring ${ant.project.name}...</echo>
			<delete file="${dist.dir}/@{jar.file.name}" />
			<mkdir dir="${dist.dir}" />	
			<mkdir dir="${build.dir}/jar"/>		
			<copy todir="${build.dir}/jar">
				<fileset dir="${classes.dir}">
					<include name="**/*"/>
					<add.excludes />
				</fileset>
			</copy>
			<copy todir="${build.dir}/jar">
				<fileset dir="${java.dir}">
					<include name="src/**" />
					<include name="*.xml" />
					<include name="*.properties" />
				</fileset>
			</copy>
			
			<copy todir="${build.dir}/jar/META-INF" failonerror="false" >
				<fileset dir="${meta.dir}">
					<include name="*.*"/>
				</fileset>
			</copy>

			<replace file="${build.dir}/jar/META-INF/icepush.tld">
				<replacefilter token="@main.servlet@" value="${main.servlet}" />
				<replacefilter token="@push.group.manager@" value="${push.group.manager}" />
			</replace>

			<!-- Check if core.groupId is set, and if so use it instead of default groupId -->
			<condition property="jar.groupId" value="${core.groupId}">
				<isset property="core.groupId"/>
			</condition>
			<property name="jar.groupId" value="${groupId}"/>
   		
			<jar destfile="${dist.dir}/@{jar.file.name}" duplicate="fail">
				<fileset dir="${build.dir}/jar">
					<include name="**/*"></include>
				</fileset>
				<!--<fileset dir="${java.dir}" includes="**/*.java"/>-->
				<add.filesets/>
	            <manifest>
	                <section name="${jar.groupId}">
	                    <attribute name="Implementation-Title"
	                               value="${product}"/>
	                    <attribute name="Implementation-Version"
	                               value="${version.string}"/>
	                    <attribute name="Build-Number"
	                               value="${build.number}"/>
	                    <attribute name="Build-Time"
	                               value="${build.time}"/>
	                    <attribute name="Implementation-Vendor"
	                               value="${company}"/>
	                </section>
	            </manifest>
			</jar>			
			<move file="${dist.dir}/@{jar.file.name}" tofile="${dist.dir}/@{temp.jar.file.name}" />
			<zip destfile="${dist.dir}/@{jar.file.name}">
				<zipfileset src="${dist.dir}/@{temp.jar.file.name}" includes="org/**,META-INF/resources/**,META-INF/MANIFEST.MF,META-INF/*.tld,META-INF/*.xml" />
			</zip>
			<delete file="${dist.dir}/@{temp.jar.file.name}"/>
		</sequential>
	</macrodef>

	<macrodef name="build.war">
		<attribute name="war.file.name" default="${ant.project.name}.war" />
		<attribute name="web.xml" default="${web.inf.dir}/web.xml" />
		<element name="add.filesets" optional="true" />
		<element name="add.libs" optional="true" />

		<sequential>
			<echo>Building war @{war.file.name}...</echo>
			<mkdir dir="${dist.dir}" />
			<mkdir dir="${build.dir}/webapp" />
			<copy todir="${build.dir}/webapp" preservelastmodified="true">
				<fileset dir="${web.dir}">
					<include name="**" />
				</fileset>
			</copy>
			<icepush.available/>
			<copy todir="${build.dir}/webapp/WEB-INF/lib" preservelastmodified="true">
				<fileset refid="icepush.dist"/>
				<add.libs />
			</copy>
			<mkdir dir="${build.dir}/webapp/WEB-INF/classes" />
			<copy todir="${build.dir}/webapp/WEB-INF/classes" preservelastmodified="true">
				<fileset dir="${build.dir}/classes">
					<include name="**" />
				</fileset>
			</copy>
			
			<antcall target="-pre.war.replace"/>
			
			<war basedir="${build.dir}/webapp" destfile="${dist.dir}/@{war.file.name}" webxml="${build.dir}/webapp/WEB-INF/web.xml">
				<add.filesets />
			</war>

		</sequential>
	</macrodef>
	
	<target name="-check.replace">
        <condition property="replace.ready">
            <and>
                <available file="${replace.file}"/>
                <isset property="replace.token"/>
                <isset property="replace.value"/>
            </and>
        </condition>
	</target>
	
	<target name="-pre.war.replace" depends="-check.replace" if="replace.ready">
	    <replace file="${replace.file}" token="${replace.token}" value="${replace.value}"/>
	</target>
	
	<macrodef name="icepush.available">
		<sequential>			
			<available file="${root.offset}/core/${dist.dir}/icepush.jar" property="icepush.jar.present"/>
			<echo message="checking for ${root.offset}/core/${dist.dir}/icepush.jar"/>
			<fail message="The core icepush.jar has to be built before this target. Building from the root will ensure all dependencies are pre-built.">
				<condition>
					<not>
						<isset property="icepush.jar.present" />
					</not>
				</condition>
			</fail>
		</sequential>
	</macrodef>
	
	<macrodef  name="icepush.jsp.available">
		<sequential>
			<available file="${root.offset}/integration/jsp/core/${dist.dir}/icepush-jsp.jar" property="icepush.jsp.available"/>
			<fail message="The core icepush-jsp.jar has to be built before this target. Building from the root will ensure all dependencies are pre-built.">
				<condition>
					<not>
						<isset property="icepush.jsp.available" />
					</not>
				</condition>
			</fail>
		</sequential>
	</macrodef>
	
	<fileset id="icepush.jsp.dist" file="${root.offset}/integration/jsp/core/${dist.dir}/icepush-jsp.jar"/>
	
	<fileset id="icepush.gwt.dist" file="${root.offset}/integration/gwt/core/${dist.dir}/icepush-gwt.jar"/>
	
	<macrodef  name="icepush.gwt.available">
		<sequential>
			<available file="${root.offset}/integration/gwt/core/${dist.dir}/icepush-gwt.jar" property="icepush.gwt.available"/>
			<fail message="The core icepush-gwt.jar has to be built before this target. Building from the root will ensure all dependencies are pre-built.">
				<condition>
					<not>
						<isset property="icepush.gwt.available" />
					</not>
				</condition>
			</fail>
		</sequential>
	</macrodef>

	<target name="jar-icepush-core">
		<ant dir="./core"/>
	</target>		
		
    <target name="war" depends="compile">
        <build.war/>
    </target>
	
	<macrodef name="copy.dist.wars">
		<attribute name="todir" default="${dist.dir}"/>
		<attribute name="fromdir"/>
		<sequential>
			<copy todir="@{todir}">
				<fileset dir="@{fromdir}" includes="*.war"/>
			</copy>
		</sequential>
	</macrodef>
	
	<!-- use this macro to merge the core classes into an integration classes dir. -->
	<macrodef name="mergeCoreWithIntegration">
		<attribute name="integration.classes" default="${classes.dir}"/>
		<sequential>
			<copy todir="@{integration.classes}" preservelastmodified="true" verbose="true">
				<fileset dir="../core/${classes.dir}">
					<include name="**" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>

</project>
